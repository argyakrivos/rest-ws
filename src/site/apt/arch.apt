	-----
	REST-WS Architecture Diagram
	-----
 	Group 1
	-----
 	December 2010
 
[./images/arch.png] Architecture Diagram


	The system consists of 4 services (actually resources in the REST architecture).

OrderService
	
	The Order service (/order) receives HTTP POST requests from the client to create new
	orders. The message body of the HTTP call contains an XML message which provides all the
	required information for the creation of the new order. The client receives an HTTP response
	as a result of the call, after the order is processed. The Response contains an XML in the
	message body where the client can find the URL of the /tray resource which is generated by
	the system. The client then can use this URL to get the representation of the tray (containing
	the processed order).
	
BeverageService
	
	The BeverageService (/beverage) receives HTTP POST requests from the OrderService to
	make the beverages. The requests contain an XML with a representation of the receipt to let
	the BeverageService know any details that it needs in order to make the beverages and
	deliver them to the TrayService, on the tray indicated by the OrderService.

CoffeeService
	
	The CoffeeService (/coffee) receives HTTP POST requests from the OrderService to make the
	coffees. The requests contains an XML with a representation of the receipt to let the
	CoffeeService know any details that it needs to make the coffees and deliver them to the
	TrayService, on the tray indicated by the OrderService.

TrayService
	
	The TrayService (/tray) receives HTTP PUT requests from the OrderService to create the tray
	resource. Since the client must know the URL of the tray in order to make his final request,
	the ID of the tray is indicated by the OrderService. The OrderService uses the receiptID to
	assure that every tray object will be unique (this means that the tray's ID will be identical
	with the receipt's ID). Therefore the URL for the GET request the client does when his order
	is done should be /tray/\{id\}.
	
	Moreover, the TrayService receives HTTP POST requests from CoffeeService and
	BeverageService to put the products (coffees, beverages) on the tray and prepare the tray
	for the client.
	
	Lastly, the TrayService receives HTTP GET requests from the client and returns a
	representation of the tray, which contains the products and the receipt. The client uses the
	URL that was given by the OrderService(/tray/\{id\}). Once the tray has been requested
	(returned to the client), it is removed from the system.

	
	The Architecture Diagram presented the system statically. The
	{{{./seq.html}Sequence Diagram}} provides a more dynamic description, mapping the flow of the interactions in the
	system.

	